// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAllowedHandlerFunc turns a function with the right signature into a list allowed handler
type ListAllowedHandlerFunc func(ListAllowedParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllowedHandlerFunc) Handle(params ListAllowedParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListAllowedHandler interface for that can handle valid list allowed params
type ListAllowedHandler interface {
	Handle(ListAllowedParams, interface{}) middleware.Responder
}

// NewListAllowed creates a new http.Handler for the list allowed operation
func NewListAllowed(ctx *middleware.Context, handler ListAllowedHandler) *ListAllowed {
	return &ListAllowed{Context: ctx, Handler: handler}
}

/* ListAllowed swagger:route GET /bids/allowed listAllowed

Get a list of all currently-allowed bids

Get a list of all currently-allowed bids (booking ids) with an ongoing or recent live connection

*/
type ListAllowed struct {
	Context *middleware.Context
	Handler ListAllowedHandler
}

func (o *ListAllowed) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListAllowedParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
